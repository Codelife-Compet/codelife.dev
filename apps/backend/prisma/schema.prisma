generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  role          Role      @default(USER)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  score         Int       @default(0)

  accounts Account[]

  Team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserCode {
  id       String  @id @default(uuid())
  userName String
  code     String? @default("")
  Slide    Slide   @relation(fields: [slideId], references: [id])
  slideId  String  @unique

  @@map("userCodes")
}

model YoutubePlaylist {
  id        String @id @default(uuid())
  youtubeId String

  videos Video[]

  @@map("playLists")
}

model Video {
  id        String @id @default(uuid())
  youtubeId String

  slideId String @unique
  Slide   Slide  @relation(fields: [slideId], references: [id])

  youtubePlaylistId String?
  YoutubePlaylist   YoutubePlaylist? @relation(fields: [youtubePlaylistId], references: [id])

  @@map("videos")
}

model Slide {
  id          String @id @default(uuid())
  name        String
  description String
  theme       String
  baseCode    String
  index       Int   @default(0)

  userCodes UserCode[]
  video     Video?

  Level   Level   @relation(fields: [levelId], references: [id])
  levelId String  
  videoId String?

  @@map("slides")
  @@unique([levelId, name])
}

model Level {
  id          String @id @default(uuid())
  name        String
  description String
  theme       String
  index       Int   @default(0)

  slides Slide[]

  Island   Island @relation(fields: [islandId], references: [id])
  islandId String 

  Ponctuation Ponctuation[]

  @@map("levels")
  @@unique([islandId, name])
}

model Ponctuation {
  id       String @id @default(uuid())
  score    Int
  userName String

  level   Level  @relation(fields: [levelId], references: [id])
  levelId String

  @@map("ponctuations")
}

model Island {
  id          String @id @default(uuid())
  name        String @unique
  description String
  theme       String
  index       Int   @default(0)

  slides Level[]

  Trail   Trail  @relation(fields: [trailId], references: [id])
  trailId String 

  @@map("islands")
  @@unique([trailId, name])
}

model Trail {
  id          String @id @default(uuid())
  name        String @unique
  description String
  theme       String

  levels Island[]

  @@map("trails")
}

model Team {
  id                 String  @id @default(uuid())
  name               String  @unique
  institutionName    String?
  institutionPicture String?
  users              User[]

  @@map("teams")
}
